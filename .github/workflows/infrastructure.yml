name: Infrastructure Management

on:
  push:
    branches: [ main ]
    paths: [ 'infra/**' ]
  pull_request:
    branches: [ main ]
    paths: [ 'infra/**' ]
  workflow_dispatch:
    inputs:
      action:
        description: 'Terraform action'
        required: true
        default: 'plan'
        type: choice
        options:
        - plan
        - apply
        - destroy
      environment:
        description: 'Target environment'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production

env:
  TF_VERSION: '1.6.0'
  TF_IN_AUTOMATION: true
  TF_CLI_ARGS: '-no-color'

jobs:
  terraform-validate:
    name: Terraform Validation
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Terraform Format Check
        run: terraform fmt -check -recursive infra/

      - name: Terraform Init
        run: |
          cd infra/environments/staging
          terraform init -backend=false

      - name: Terraform Validate
        run: |
          cd infra/environments/staging
          terraform validate

      - name: TFSec Security Scan
        uses: aquasecurity/tfsec-action@v1.0.3
        with:
          working_directory: infra/

      - name: Checkov Infrastructure Scan
        uses: bridgecrewio/checkov-action@master
        with:
          directory: infra/
          framework: terraform
          output_format: sarif
          output_file_path: checkov-infra-results.sarif

      - name: Upload Checkov results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: checkov-infra-results.sarif

  terraform-plan:
    name: Terraform Plan
    runs-on: ubuntu-latest
    needs: terraform-validate
    if: github.event_name == 'pull_request' || (github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'plan')
    environment: 
      name: ${{ github.event.inputs.environment || 'staging' }}
    permissions:
      id-token: write
      contents: read
      pull-requests: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.WIF_PROVIDER }}
          service_account: ${{ secrets.WIF_SERVICE_ACCOUNT }}

      - name: Terraform Init
        run: |
          cd infra/environments/${{ github.event.inputs.environment || 'staging' }}
          terraform init

      - name: Terraform Plan
        id: plan
        run: |
          cd infra/environments/${{ github.event.inputs.environment || 'staging' }}
          terraform plan -detailed-exitcode -out=tfplan
        continue-on-error: true

      - name: Upload Terraform Plan
        uses: actions/upload-artifact@v4
        with:
          name: terraform-plan-${{ github.event.inputs.environment || 'staging' }}
          path: infra/environments/${{ github.event.inputs.environment || 'staging' }}/tfplan

      - name: Comment on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const { execSync } = require('child_process');
            
            // Get terraform plan output
            const planOutput = execSync('cd infra/environments/staging && terraform show -no-color tfplan').toString();
            
            const comment = `## Terraform Plan Results
            
            \`\`\`terraform
            ${planOutput.substring(0, 30000)}${planOutput.length > 30000 ? '\n... (truncated)' : ''}
            \`\`\`
            
            **Plan Status:** ${{ steps.plan.outputs.exitcode == '0' && 'No Changes' || steps.plan.outputs.exitcode == '2' && 'Changes Detected' || 'Error' }}
            `;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

  terraform-apply:
    name: Terraform Apply
    runs-on: ubuntu-latest
    needs: terraform-validate
    if: (github.event_name == 'push' && github.ref == 'refs/heads/main') || (github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'apply')
    environment: 
      name: ${{ github.event.inputs.environment || 'staging' }}
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.WIF_PROVIDER }}
          service_account: ${{ secrets.WIF_SERVICE_ACCOUNT }}

      - name: Terraform Init
        run: |
          cd infra/environments/${{ github.event.inputs.environment || 'staging' }}
          terraform init

      - name: Terraform Plan
        run: |
          cd infra/environments/${{ github.event.inputs.environment || 'staging' }}
          terraform plan -out=tfplan

      - name: Terraform Apply
        run: |
          cd infra/environments/${{ github.event.inputs.environment || 'staging' }}
          terraform apply tfplan

      - name: Save Terraform State
        run: |
          cd infra/environments/${{ github.event.inputs.environment || 'staging' }}
          terraform output -json > terraform-outputs.json

      - name: Upload Terraform Outputs
        uses: actions/upload-artifact@v4
        with:
          name: terraform-outputs-${{ github.event.inputs.environment || 'staging' }}
          path: infra/environments/${{ github.event.inputs.environment || 'staging' }}/terraform-outputs.json